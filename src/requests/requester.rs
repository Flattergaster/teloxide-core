// We can't change Telegram API
#![allow(clippy::too_many_arguments)]

use url::Url;

use crate::{
    payloads::{GetMe, SendMessage, *},
    requests::Request,
    types::{
        BotCommand, ChatAction, ChatId, ChatPermissions, InlineQueryResult, InputFile, InputMedia,
        InputSticker, LabeledPrice, PassportElementError, TargetMessage,
    },
};

/// Methods for building requests.
///
/// This trait is implemented by all bots & bot adaptors.
///
/// ## Examples
///
/// Calling TBA methods:
///
/// ```
/// # async {
/// use teloxide_core::{prelude::*, types::ParseMode};
///
/// // Bot implements `Requester`
/// let bot = Bot::new("TOKEN");
///
/// // Required parameters are supplied to the `Requester` methods:
/// bot.send_message(0, "<b>Text</b>")
///     // Optional parameters can be supplied by calling setters
///     .parse_mode(ParseMode::Html)
///     // To send request to telegram you need to call `.send()` and await the resulting future
///     .send()
///     .await?;
/// # Ok::<_, teloxide_core::RequestError>(()) };
/// ```
///
/// Using `Requester` in a generic context:
///
/// ```
/// use teloxide_core::{prelude::*, types::Message};
///
/// async fn send_hi<R>(bot: R, chat: i64) -> Message
/// where
///     R: Requester,
/// {
///     bot.send_message(chat, "hi").send().await.expect("error")
/// }
/// ```
#[cfg_attr(all(any(docsrs, dep_docsrs), feature = "nightly"), doc(notable_trait))]
pub trait Requester {
    /// Error type returned by all requests.
    type Err: std::error::Error + Send;

    // This block is auto generated by [`cg`] from [`schema`].
    //
    // **DO NOT EDIT THIS BLOCK**,
    //
    // Edit `cg` or `schema` instead.
    //
    // [cg]: https://github.com/teloxide/cg
    // [`schema`]: https://github.com/WaffleLapkin/tg-methods-schema

    type GetUpdates: Request<Payload = GetUpdates, Err = Self::Err>;

    /// For Telegram documentation see [`GetUpdates`].
    fn get_updates(&self) -> Self::GetUpdates;

    type SetWebhook: Request<Payload = SetWebhook, Err = Self::Err>;

    /// For Telegram documentation see [`SetWebhook`].
    fn set_webhook(&self, url: Url) -> Self::SetWebhook;

    type DeleteWebhook: Request<Payload = DeleteWebhook, Err = Self::Err>;

    /// For Telegram documentation see [`DeleteWebhook`].
    fn delete_webhook(&self) -> Self::DeleteWebhook;

    type GetWebhookInfo: Request<Payload = GetWebhookInfo, Err = Self::Err>;

    /// For Telegram documentation see [`GetWebhookInfo`].
    fn get_webhook_info(&self) -> Self::GetWebhookInfo;

    type GetMe: Request<Payload = GetMe, Err = Self::Err>;

    /// For Telegram documentation see [`GetMe`].
    fn get_me(&self) -> Self::GetMe;

    type LogOut: Request<Payload = LogOut, Err = Self::Err>;

    /// For Telegram documentation see [`LogOut`].
    fn log_out(&self) -> Self::LogOut;

    type Close: Request<Payload = Close, Err = Self::Err>;

    /// For Telegram documentation see [`Close`].
    fn close(&self) -> Self::Close;

    type SendMessage: Request<Payload = SendMessage, Err = Self::Err>;

    /// For Telegram documentation see [`SendMessage`].
    fn send_message(&self, chat_id: ChatId, text: String) -> Self::SendMessage;

    type ForwardMessage: Request<Payload = ForwardMessage, Err = Self::Err>;

    /// For Telegram documentation see [`ForwardMessage`].
    fn forward_message(
        &self,
        chat_id: ChatId,
        from_chat_id: ChatId,
        message_id: i32,
    ) -> Self::ForwardMessage;

    type CopyMessage: Request<Payload = CopyMessage, Err = Self::Err>;

    /// For Telegram documentation see [`CopyMessage`].
    fn copy_message(
        &self,
        chat_id: ChatId,
        from_chat_id: ChatId,
        message_id: i32,
    ) -> Self::CopyMessage;

    type SendPhoto: Request<Payload = SendPhoto, Err = Self::Err>;

    /// For Telegram documentation see [`SendPhoto`].
    fn send_photo(&self, chat_id: ChatId, photo: InputFile) -> Self::SendPhoto;

    type SendAudio: Request<Payload = SendAudio, Err = Self::Err>;

    /// For Telegram documentation see [`SendAudio`].
    fn send_audio(&self, chat_id: ChatId, audio: InputFile) -> Self::SendAudio;

    type SendDocument: Request<Payload = SendDocument, Err = Self::Err>;

    /// For Telegram documentation see [`SendDocument`].
    fn send_document(&self, chat_id: ChatId, document: InputFile) -> Self::SendDocument;

    type SendVideo: Request<Payload = SendVideo, Err = Self::Err>;

    /// For Telegram documentation see [`SendVideo`].
    fn send_video(&self, chat_id: ChatId, video: InputFile) -> Self::SendVideo;

    type SendAnimation: Request<Payload = SendAnimation, Err = Self::Err>;

    /// For Telegram documentation see [`SendAnimation`].
    fn send_animation(&self, chat_id: ChatId, animation: InputFile) -> Self::SendAnimation;

    type SendVoice: Request<Payload = SendVoice, Err = Self::Err>;

    /// For Telegram documentation see [`SendVoice`].
    fn send_voice(&self, chat_id: ChatId, voice: InputFile) -> Self::SendVoice;

    type SendVideoNote: Request<Payload = SendVideoNote, Err = Self::Err>;

    /// For Telegram documentation see [`SendVideoNote`].
    fn send_video_note(&self, chat_id: ChatId, video_note: InputFile) -> Self::SendVideoNote;

    type SendMediaGroup: Request<Payload = SendMediaGroup, Err = Self::Err>;

    /// For Telegram documentation see [`SendMediaGroup`].
    fn send_media_group(&self, chat_id: ChatId, media: Vec<InputMedia>) -> Self::SendMediaGroup;

    type SendLocation: Request<Payload = SendLocation, Err = Self::Err>;

    /// For Telegram documentation see [`SendLocation`].
    fn send_location(&self, chat_id: ChatId, latitude: f64, longitude: f64) -> Self::SendLocation;

    type EditMessageLiveLocation: Request<Payload = EditMessageLiveLocation, Err = Self::Err>;

    /// For Telegram documentation see [`EditMessageLiveLocation`].
    fn edit_message_live_location(
        &self,
        chat_id: ChatId,
        message_id: i32,
        latitude: f64,
        longitude: f64,
    ) -> Self::EditMessageLiveLocation;

    type EditMessageLiveLocationInline: Request<
        Payload = EditMessageLiveLocationInline,
        Err = Self::Err,
    >;

    /// For Telegram documentation see [`EditMessageLiveLocationInline`].
    fn edit_message_live_location_inline(
        &self,
        inline_message_id: String,
        latitude: f64,
        longitude: f64,
    ) -> Self::EditMessageLiveLocationInline;

    type StopMessageLiveLocation: Request<Payload = StopMessageLiveLocation, Err = Self::Err>;

    /// For Telegram documentation see [`StopMessageLiveLocation`].
    fn stop_message_live_location(
        &self,
        chat_id: ChatId,
        message_id: i32,
        latitude: f64,
        longitude: f64,
    ) -> Self::StopMessageLiveLocation;

    type StopMessageLiveLocationInline: Request<
        Payload = StopMessageLiveLocationInline,
        Err = Self::Err,
    >;

    /// For Telegram documentation see [`StopMessageLiveLocationInline`].
    fn stop_message_live_location_inline(
        &self,
        inline_message_id: String,
        latitude: f64,
        longitude: f64,
    ) -> Self::StopMessageLiveLocationInline;

    type SendVenue: Request<Payload = SendVenue, Err = Self::Err>;

    /// For Telegram documentation see [`SendVenue`].
    fn send_venue(
        &self,
        chat_id: ChatId,
        latitude: f64,
        longitude: f64,
        title: String,
        address: String,
    ) -> Self::SendVenue;

    type SendContact: Request<Payload = SendContact, Err = Self::Err>;

    /// For Telegram documentation see [`SendContact`].
    fn send_contact(
        &self,
        chat_id: ChatId,
        phone_number: String,
        first_name: String,
    ) -> Self::SendContact;

    type SendPoll: Request<Payload = SendPoll, Err = Self::Err>;

    /// For Telegram documentation see [`SendPoll`].
    fn send_poll(&self, chat_id: ChatId, question: String, options: Vec<String>) -> Self::SendPoll;

    type SendDice: Request<Payload = SendDice, Err = Self::Err>;

    /// For Telegram documentation see [`SendDice`].
    fn send_dice(&self, chat_id: ChatId) -> Self::SendDice;

    type SendChatAction: Request<Payload = SendChatAction, Err = Self::Err>;

    /// For Telegram documentation see [`SendChatAction`].
    fn send_chat_action(&self, chat_id: ChatId, action: ChatAction) -> Self::SendChatAction;

    type GetUserProfilePhotos: Request<Payload = GetUserProfilePhotos, Err = Self::Err>;

    /// For Telegram documentation see [`GetUserProfilePhotos`].
    fn get_user_profile_photos(&self, user_id: i64) -> Self::GetUserProfilePhotos;

    type GetFile: Request<Payload = GetFile, Err = Self::Err>;

    /// For Telegram documentation see [`GetFile`].
    fn get_file(&self, file_id: String) -> Self::GetFile;

    type BanChatMember: Request<Payload = BanChatMember, Err = Self::Err>;

    /// For Telegram documentation see [`BanChatMember`].
    fn ban_chat_member(&self, chat_id: ChatId, user_id: i64) -> Self::BanChatMember;

    type KickChatMember: Request<Payload = KickChatMember, Err = Self::Err>;

    /// For Telegram documentation see [`KickChatMember`].
    fn kick_chat_member(&self, chat_id: ChatId, user_id: i64) -> Self::KickChatMember;

    type UnbanChatMember: Request<Payload = UnbanChatMember, Err = Self::Err>;

    /// For Telegram documentation see [`UnbanChatMember`].
    fn unban_chat_member(&self, chat_id: ChatId, user_id: i64) -> Self::UnbanChatMember;

    type RestrictChatMember: Request<Payload = RestrictChatMember, Err = Self::Err>;

    /// For Telegram documentation see [`RestrictChatMember`].
    fn restrict_chat_member(
        &self,
        chat_id: ChatId,
        user_id: i64,
        permissions: ChatPermissions,
    ) -> Self::RestrictChatMember;

    type PromoteChatMember: Request<Payload = PromoteChatMember, Err = Self::Err>;

    /// For Telegram documentation see [`PromoteChatMember`].
    fn promote_chat_member(&self, chat_id: ChatId, user_id: i64) -> Self::PromoteChatMember;

    type SetChatAdministratorCustomTitle: Request<
        Payload = SetChatAdministratorCustomTitle,
        Err = Self::Err,
    >;

    /// For Telegram documentation see [`SetChatAdministratorCustomTitle`].
    fn set_chat_administrator_custom_title(
        &self,
        chat_id: ChatId,
        user_id: i64,
        custom_title: String,
    ) -> Self::SetChatAdministratorCustomTitle;

    type BanChatSenderChat: Request<Payload = BanChatSenderChat, Err = Self::Err>;

    /// For Telegram documentation see [`BanChatSenderChat`].
    fn ban_chat_sender_chat(&self, chat_id: ChatId, sender_chat_id: i64)
        -> Self::BanChatSenderChat;

    type UnbanChatSenderChat: Request<Payload = UnbanChatSenderChat, Err = Self::Err>;

    /// For Telegram documentation see [`UnbanChatSenderChat`].
    fn unban_chat_sender_chat(
        &self,
        chat_id: ChatId,
        sender_chat_id: i64,
    ) -> Self::UnbanChatSenderChat;

    type SetChatPermissions: Request<Payload = SetChatPermissions, Err = Self::Err>;

    /// For Telegram documentation see [`SetChatPermissions`].
    fn set_chat_permissions(
        &self,
        chat_id: ChatId,
        permissions: ChatPermissions,
    ) -> Self::SetChatPermissions;

    type ExportChatInviteLink: Request<Payload = ExportChatInviteLink, Err = Self::Err>;

    /// For Telegram documentation see [`ExportChatInviteLink`].
    fn export_chat_invite_link(&self, chat_id: ChatId) -> Self::ExportChatInviteLink;

    type CreateChatInviteLink: Request<Payload = CreateChatInviteLink, Err = Self::Err>;

    /// For Telegram documentation see [`CreateChatInviteLink`].
    fn create_chat_invite_link(&self, chat_id: ChatId) -> Self::CreateChatInviteLink;

    type EditChatInviteLink: Request<Payload = EditChatInviteLink, Err = Self::Err>;

    /// For Telegram documentation see [`EditChatInviteLink`].
    fn edit_chat_invite_link(
        &self,
        chat_id: ChatId,
        invite_link: String,
    ) -> Self::EditChatInviteLink;

    type RevokeChatInviteLink: Request<Payload = RevokeChatInviteLink, Err = Self::Err>;

    /// For Telegram documentation see [`RevokeChatInviteLink`].
    fn revoke_chat_invite_link(
        &self,
        chat_id: ChatId,
        invite_link: String,
    ) -> Self::RevokeChatInviteLink;

    type ApproveChatJoinRequest: Request<Payload = ApproveChatJoinRequest, Err = Self::Err>;

    /// For Telegram documentation see [`ApproveChatJoinRequest`].
    fn approve_chat_join_request(
        &self,
        chat_id: ChatId,
        user_id: i64,
    ) -> Self::ApproveChatJoinRequest;

    type DeclineChatJoinRequest: Request<Payload = DeclineChatJoinRequest, Err = Self::Err>;

    /// For Telegram documentation see [`DeclineChatJoinRequest`].
    fn decline_chat_join_request(
        &self,
        chat_id: ChatId,
        user_id: i64,
    ) -> Self::DeclineChatJoinRequest;

    type SetChatPhoto: Request<Payload = SetChatPhoto, Err = Self::Err>;

    /// For Telegram documentation see [`SetChatPhoto`].
    fn set_chat_photo(&self, chat_id: ChatId, photo: InputFile) -> Self::SetChatPhoto;

    type DeleteChatPhoto: Request<Payload = DeleteChatPhoto, Err = Self::Err>;

    /// For Telegram documentation see [`DeleteChatPhoto`].
    fn delete_chat_photo(&self, chat_id: ChatId) -> Self::DeleteChatPhoto;

    type SetChatTitle: Request<Payload = SetChatTitle, Err = Self::Err>;

    /// For Telegram documentation see [`SetChatTitle`].
    fn set_chat_title(&self, chat_id: ChatId, title: String) -> Self::SetChatTitle;

    type SetChatDescription: Request<Payload = SetChatDescription, Err = Self::Err>;

    /// For Telegram documentation see [`SetChatDescription`].
    fn set_chat_description(&self, chat_id: ChatId) -> Self::SetChatDescription;

    type PinChatMessage: Request<Payload = PinChatMessage, Err = Self::Err>;

    /// For Telegram documentation see [`PinChatMessage`].
    fn pin_chat_message(&self, chat_id: ChatId, message_id: i32) -> Self::PinChatMessage;

    type UnpinChatMessage: Request<Payload = UnpinChatMessage, Err = Self::Err>;

    /// For Telegram documentation see [`UnpinChatMessage`].
    fn unpin_chat_message(&self, chat_id: ChatId) -> Self::UnpinChatMessage;

    type UnpinAllChatMessages: Request<Payload = UnpinAllChatMessages, Err = Self::Err>;

    /// For Telegram documentation see [`UnpinAllChatMessages`].
    fn unpin_all_chat_messages(&self, chat_id: ChatId) -> Self::UnpinAllChatMessages;

    type LeaveChat: Request<Payload = LeaveChat, Err = Self::Err>;

    /// For Telegram documentation see [`LeaveChat`].
    fn leave_chat(&self, chat_id: ChatId) -> Self::LeaveChat;

    type GetChat: Request<Payload = GetChat, Err = Self::Err>;

    /// For Telegram documentation see [`GetChat`].
    fn get_chat(&self, chat_id: ChatId) -> Self::GetChat;

    type GetChatAdministrators: Request<Payload = GetChatAdministrators, Err = Self::Err>;

    /// For Telegram documentation see [`GetChatAdministrators`].
    fn get_chat_administrators(&self, chat_id: ChatId) -> Self::GetChatAdministrators;

    type GetChatMemberCount: Request<Payload = GetChatMemberCount, Err = Self::Err>;

    /// For Telegram documentation see [`GetChatMemberCount`].
    fn get_chat_member_count(&self, chat_id: ChatId) -> Self::GetChatMemberCount;

    type GetChatMembersCount: Request<Payload = GetChatMembersCount, Err = Self::Err>;

    /// For Telegram documentation see [`GetChatMembersCount`].
    fn get_chat_members_count(&self, chat_id: ChatId) -> Self::GetChatMembersCount;

    type GetChatMember: Request<Payload = GetChatMember, Err = Self::Err>;

    /// For Telegram documentation see [`GetChatMember`].
    fn get_chat_member(&self, chat_id: ChatId, user_id: i64) -> Self::GetChatMember;

    type SetChatStickerSet: Request<Payload = SetChatStickerSet, Err = Self::Err>;

    /// For Telegram documentation see [`SetChatStickerSet`].
    fn set_chat_sticker_set(
        &self,
        chat_id: ChatId,
        sticker_set_name: String,
    ) -> Self::SetChatStickerSet;

    type DeleteChatStickerSet: Request<Payload = DeleteChatStickerSet, Err = Self::Err>;

    /// For Telegram documentation see [`DeleteChatStickerSet`].
    fn delete_chat_sticker_set(&self, chat_id: ChatId) -> Self::DeleteChatStickerSet;

    type AnswerCallbackQuery: Request<Payload = AnswerCallbackQuery, Err = Self::Err>;

    /// For Telegram documentation see [`AnswerCallbackQuery`].
    fn answer_callback_query(&self, callback_query_id: String) -> Self::AnswerCallbackQuery;

    type SetMyCommands: Request<Payload = SetMyCommands, Err = Self::Err>;

    /// For Telegram documentation see [`SetMyCommands`].
    fn set_my_commands(&self, commands: Vec<BotCommand>) -> Self::SetMyCommands;

    type GetMyCommands: Request<Payload = GetMyCommands, Err = Self::Err>;

    /// For Telegram documentation see [`GetMyCommands`].
    fn get_my_commands(&self) -> Self::GetMyCommands;

    type DeleteMyCommands: Request<Payload = DeleteMyCommands, Err = Self::Err>;

    /// For Telegram documentation see [`DeleteMyCommands`].
    fn delete_my_commands(&self) -> Self::DeleteMyCommands;

    type AnswerInlineQuery: Request<Payload = AnswerInlineQuery, Err = Self::Err>;

    /// For Telegram documentation see [`AnswerInlineQuery`].
    fn answer_inline_query(
        &self,
        inline_query_id: String,
        results: Vec<InlineQueryResult>,
    ) -> Self::AnswerInlineQuery;

    type EditMessageText: Request<Payload = EditMessageText, Err = Self::Err>;

    /// For Telegram documentation see [`EditMessageText`].
    fn edit_message_text(
        &self,
        chat_id: ChatId,
        message_id: i32,
        text: String,
    ) -> Self::EditMessageText;

    type EditMessageTextInline: Request<Payload = EditMessageTextInline, Err = Self::Err>;

    /// For Telegram documentation see [`EditMessageTextInline`].
    fn edit_message_text_inline(
        &self,
        inline_message_id: String,
        text: String,
    ) -> Self::EditMessageTextInline;

    type EditMessageCaption: Request<Payload = EditMessageCaption, Err = Self::Err>;

    /// For Telegram documentation see [`EditMessageCaption`].
    fn edit_message_caption(&self, chat_id: ChatId, message_id: i32) -> Self::EditMessageCaption;

    type EditMessageCaptionInline: Request<Payload = EditMessageCaptionInline, Err = Self::Err>;

    /// For Telegram documentation see [`EditMessageCaptionInline`].
    fn edit_message_caption_inline(
        &self,
        inline_message_id: String,
    ) -> Self::EditMessageCaptionInline;

    type EditMessageMedia: Request<Payload = EditMessageMedia, Err = Self::Err>;

    /// For Telegram documentation see [`EditMessageMedia`].
    fn edit_message_media(
        &self,
        chat_id: ChatId,
        message_id: i32,
        media: InputMedia,
    ) -> Self::EditMessageMedia;

    type EditMessageMediaInline: Request<Payload = EditMessageMediaInline, Err = Self::Err>;

    /// For Telegram documentation see [`EditMessageMediaInline`].
    fn edit_message_media_inline(
        &self,
        inline_message_id: String,
        media: InputMedia,
    ) -> Self::EditMessageMediaInline;

    type EditMessageReplyMarkup: Request<Payload = EditMessageReplyMarkup, Err = Self::Err>;

    /// For Telegram documentation see [`EditMessageReplyMarkup`].
    fn edit_message_reply_markup(
        &self,
        chat_id: ChatId,
        message_id: i32,
    ) -> Self::EditMessageReplyMarkup;

    type EditMessageReplyMarkupInline: Request<
        Payload = EditMessageReplyMarkupInline,
        Err = Self::Err,
    >;

    /// For Telegram documentation see [`EditMessageReplyMarkupInline`].
    fn edit_message_reply_markup_inline(
        &self,
        inline_message_id: String,
    ) -> Self::EditMessageReplyMarkupInline;

    type StopPoll: Request<Payload = StopPoll, Err = Self::Err>;

    /// For Telegram documentation see [`StopPoll`].
    fn stop_poll(&self, chat_id: ChatId, message_id: i32) -> Self::StopPoll;

    type DeleteMessage: Request<Payload = DeleteMessage, Err = Self::Err>;

    /// For Telegram documentation see [`DeleteMessage`].
    fn delete_message(&self, chat_id: ChatId, message_id: i32) -> Self::DeleteMessage;

    type SendSticker: Request<Payload = SendSticker, Err = Self::Err>;

    /// For Telegram documentation see [`SendSticker`].
    fn send_sticker(&self, chat_id: ChatId, sticker: InputFile) -> Self::SendSticker;

    type GetStickerSet: Request<Payload = GetStickerSet, Err = Self::Err>;

    /// For Telegram documentation see [`GetStickerSet`].
    fn get_sticker_set(&self, name: String) -> Self::GetStickerSet;

    type UploadStickerFile: Request<Payload = UploadStickerFile, Err = Self::Err>;

    /// For Telegram documentation see [`UploadStickerFile`].
    fn upload_sticker_file(&self, user_id: i64, png_sticker: InputFile) -> Self::UploadStickerFile;

    type CreateNewStickerSet: Request<Payload = CreateNewStickerSet, Err = Self::Err>;

    /// For Telegram documentation see [`CreateNewStickerSet`].
    fn create_new_sticker_set(
        &self,
        user_id: i64,
        name: String,
        title: String,
        sticker: InputSticker,
        emojis: String,
    ) -> Self::CreateNewStickerSet;

    type AddStickerToSet: Request<Payload = AddStickerToSet, Err = Self::Err>;

    /// For Telegram documentation see [`AddStickerToSet`].
    fn add_sticker_to_set(
        &self,
        user_id: i64,
        name: String,
        sticker: InputSticker,
        emojis: String,
    ) -> Self::AddStickerToSet;

    type SetStickerPositionInSet: Request<Payload = SetStickerPositionInSet, Err = Self::Err>;

    /// For Telegram documentation see [`SetStickerPositionInSet`].
    fn set_sticker_position_in_set(
        &self,
        sticker: String,
        position: u32,
    ) -> Self::SetStickerPositionInSet;

    type DeleteStickerFromSet: Request<Payload = DeleteStickerFromSet, Err = Self::Err>;

    /// For Telegram documentation see [`DeleteStickerFromSet`].
    fn delete_sticker_from_set(&self, sticker: String) -> Self::DeleteStickerFromSet;

    type SetStickerSetThumb: Request<Payload = SetStickerSetThumb, Err = Self::Err>;

    /// For Telegram documentation see [`SetStickerSetThumb`].
    fn set_sticker_set_thumb(&self, name: String, user_id: i64) -> Self::SetStickerSetThumb;

    type SendInvoice: Request<Payload = SendInvoice, Err = Self::Err>;

    /// For Telegram documentation see [`SendInvoice`].
    fn send_invoice(
        &self,
        chat_id: ChatId,
        title: String,
        description: String,
        payload: String,
        provider_token: String,
        currency: String,
        prices: Vec<LabeledPrice>,
    ) -> Self::SendInvoice;

    type AnswerShippingQuery: Request<Payload = AnswerShippingQuery, Err = Self::Err>;

    /// For Telegram documentation see [`AnswerShippingQuery`].
    fn answer_shipping_query(
        &self,
        shipping_query_id: String,
        ok: bool,
    ) -> Self::AnswerShippingQuery;

    type AnswerPreCheckoutQuery: Request<Payload = AnswerPreCheckoutQuery, Err = Self::Err>;

    /// For Telegram documentation see [`AnswerPreCheckoutQuery`].
    fn answer_pre_checkout_query(
        &self,
        pre_checkout_query_id: String,
        ok: bool,
    ) -> Self::AnswerPreCheckoutQuery;

    type SetPassportDataErrors: Request<Payload = SetPassportDataErrors, Err = Self::Err>;

    /// For Telegram documentation see [`SetPassportDataErrors`].
    fn set_passport_data_errors(
        &self,
        user_id: i64,
        errors: Vec<PassportElementError>,
    ) -> Self::SetPassportDataErrors;

    type SendGame: Request<Payload = SendGame, Err = Self::Err>;

    /// For Telegram documentation see [`SendGame`].
    fn send_game(&self, chat_id: u32, game_short_name: String) -> Self::SendGame;

    type SetGameScore: Request<Payload = SetGameScore, Err = Self::Err>;

    /// For Telegram documentation see [`SetGameScore`].
    fn set_game_score(
        &self,
        user_id: i64,
        score: u64,
        chat_id: u32,
        message_id: i64,
    ) -> Self::SetGameScore;

    type SetGameScoreInline: Request<Payload = SetGameScoreInline, Err = Self::Err>;

    /// For Telegram documentation see [`SetGameScoreInline`].
    fn set_game_score_inline(
        &self,
        user_id: i64,
        score: u64,
        inline_message_id: String,
    ) -> Self::SetGameScoreInline;

    type GetGameHighScores: Request<Payload = GetGameHighScores, Err = Self::Err>;

    /// For Telegram documentation see [`GetGameHighScores`].
    fn get_game_high_scores(&self, user_id: i64, target: TargetMessage) -> Self::GetGameHighScores;
}

macro_rules! fty {
    ($T:ident) => {
        B::$T
    };
}

macro_rules! fwd_deref {
    ($m:ident $this:ident ($($arg:ident : $T:ty),*)) => {
        core::ops::Deref::deref($this).$m($($arg),*)
    };
}

macro_rules! forward_all {
    () => {
        requester_forward! {
            get_me, log_out, close, get_updates, set_webhook, delete_webhook, get_webhook_info,
            forward_message, copy_message, send_message, send_photo, send_audio, send_document,
            send_video, send_animation, send_voice, send_video_note, send_media_group, send_location,
            edit_message_live_location, edit_message_live_location_inline,
            stop_message_live_location, stop_message_live_location_inline, send_venue,
            send_contact, send_poll, send_dice, send_chat_action, get_user_profile_photos,
            get_file, kick_chat_member, ban_chat_member, unban_chat_member, restrict_chat_member,
            promote_chat_member, set_chat_administrator_custom_title,
            ban_chat_sender_chat, unban_chat_sender_chat, set_chat_permissions,
            export_chat_invite_link, create_chat_invite_link, edit_chat_invite_link,
            revoke_chat_invite_link, set_chat_photo, delete_chat_photo, set_chat_title,
            set_chat_description, pin_chat_message, unpin_chat_message, unpin_all_chat_messages,
            leave_chat, get_chat, get_chat_administrators, get_chat_members_count, get_chat_member_count, get_chat_member,
            set_chat_sticker_set, delete_chat_sticker_set, answer_callback_query,
            set_my_commands, get_my_commands, delete_my_commands, answer_inline_query, edit_message_text,
            edit_message_text_inline, edit_message_caption, edit_message_caption_inline,
            edit_message_media, edit_message_media_inline, edit_message_reply_markup,
            edit_message_reply_markup_inline, stop_poll, delete_message, send_sticker,
            get_sticker_set, upload_sticker_file, create_new_sticker_set,
            add_sticker_to_set, set_sticker_position_in_set, delete_sticker_from_set,
            set_sticker_set_thumb, send_invoice, answer_shipping_query,
            answer_pre_checkout_query, set_passport_data_errors, send_game,
            set_game_score, set_game_score_inline, get_game_high_scores,
            approve_chat_join_request, decline_chat_join_request => fwd_deref, fty
        }
    };
}

impl<B> Requester for &B
where
    B: Requester,
{
    type Err = B::Err;

    forward_all! {}
}

impl<B> Requester for &mut B
where
    B: Requester,
{
    type Err = B::Err;

    forward_all! {}
}

impl<B> Requester for Box<B>
where
    B: Requester,
{
    type Err = B::Err;

    forward_all! {}
}

impl<B> Requester for std::sync::Arc<B>
where
    B: Requester,
{
    type Err = B::Err;

    forward_all! {}
}

impl<B> Requester for std::rc::Rc<B>
where
    B: Requester,
{
    type Err = B::Err;

    forward_all! {}
}

macro_rules! fty_either {
    ($T:ident) => {
        either::Either<LR::$T, RR::$T>
    };
}

macro_rules! fwd_either {
    ($m:ident $this:ident ($($arg:ident : $T:ty),*)) => {
        match ($this) {
            either::Either::Left(l) => either::Either::Left(l.$m($($arg),*)),
            either::Either::Right(r) => either::Either::Right(r.$m($($arg),*)),
        }
    };
}

impl<LR, RR> Requester for either::Either<LR, RR>
where
    LR: Requester,
    RR: Requester<Err = LR::Err>,
{
    type Err = LR::Err;

    requester_forward! {
        get_me, log_out, close, get_updates, set_webhook, delete_webhook, get_webhook_info,
        forward_message, copy_message, send_message, send_photo, send_audio, send_document,
        send_video, send_animation, send_voice, send_video_note, send_media_group, send_location,
        edit_message_live_location, edit_message_live_location_inline,
        stop_message_live_location, stop_message_live_location_inline, send_venue,
        send_contact, send_poll, send_dice, send_chat_action, get_user_profile_photos,
        get_file, kick_chat_member, ban_chat_member, unban_chat_member, restrict_chat_member,
        promote_chat_member, set_chat_administrator_custom_title,
        ban_chat_sender_chat, unban_chat_sender_chat, set_chat_permissions,
        export_chat_invite_link, create_chat_invite_link, edit_chat_invite_link,
        revoke_chat_invite_link, set_chat_photo, delete_chat_photo, set_chat_title,
        set_chat_description, pin_chat_message, unpin_chat_message, unpin_all_chat_messages,
        leave_chat, get_chat, get_chat_administrators, get_chat_members_count, get_chat_member_count, get_chat_member,
        set_chat_sticker_set, delete_chat_sticker_set, answer_callback_query,
        set_my_commands, get_my_commands, delete_my_commands, answer_inline_query, edit_message_text,
        edit_message_text_inline, edit_message_caption, edit_message_caption_inline,
        edit_message_media, edit_message_media_inline, edit_message_reply_markup,
        edit_message_reply_markup_inline, stop_poll, delete_message, send_sticker,
        get_sticker_set, upload_sticker_file, create_new_sticker_set,
        add_sticker_to_set, set_sticker_position_in_set, delete_sticker_from_set,
        set_sticker_set_thumb, send_invoice, answer_shipping_query,
        answer_pre_checkout_query, set_passport_data_errors, send_game,
        set_game_score, set_game_score_inline, get_game_high_scores,
        approve_chat_join_request, decline_chat_join_request => fwd_either, fty_either
    }
}
